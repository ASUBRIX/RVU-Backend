const app = require('../app');
const debug = require('debug')('lms-backend-server:server');
const http = require('http');
const { Server } = require('socket.io');

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST']
  }
});

io.on('connection', (socket) => {
  console.log(`ðŸŸ¢ Client connected: ${socket.id}`);

  socket.on('join_room', (userId) => {
    socket.join(`chat_${userId}`);
    console.log(`Socket ${socket.id} joined room chat_${userId}`);
  });

  socket.on('chat_message', (msg) => {
    if (msg.userId) {
      io.to(`chat_${msg.userId}`).emit('chat_message', msg);
    }
  });

  socket.on('disconnect', () => {
    console.log(`ðŸ”´ Client disconnected: ${socket.id}`);
  });
});

server.listen(port, () => {
  console.log(`Server running`);
});
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
